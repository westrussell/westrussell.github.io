<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML面试题</title>
    <url>/2022/09/25/HTML%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="1-关于HTML语义化的了解，你知道的都有哪些标签？"><a href="#1-关于HTML语义化的了解，你知道的都有哪些标签？" class="headerlink" title="1. 关于HTML语义化的了解，你知道的都有哪些标签？"></a>1. 关于HTML语义化的了解，你知道的都有哪些标签？</h1><p>header、footer、article、address都属于语义化明确的标签。</p>
<p>①用正确的标签做正确的事情。</p>
<p>②html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析；即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的;</p>
<p>③ 搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO;</p>
<p>④ 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解</p>
<hr>
<h1 id="2-HTML标签有哪些："><a href="#2-HTML标签有哪些：" class="headerlink" title="2.HTML标签有哪些："></a>2.HTML标签有哪些：</h1><h2 id="1-块级标签："><a href="#1-块级标签：" class="headerlink" title="1.块级标签："></a>1.块级标签：</h2><p>默认宽度100%(占满一行)；</p>
<p>块级标签自动换行(独占一行，右边不能有任何东西)；</p>
<p>块级标签可以使用CSS设置宽度高度！</p>
<p>常用的块状元素有：div、 p、 h1 、h6、ol、ul、dl、table、address、blockquote、form</p>
<h2 id="2-行级标签："><a href="#2-行级标签：" class="headerlink" title="2.行级标签："></a>2.行级标签：</h2><p>默认宽度由内容撑开(内容多宽、宽度就占多宽)；</p>
<p>行级标签不会自动换行(一行当中，从左往右依次排列)；</p>
<p>行级标签的宽度高度不能设置！ 常用的内联元素有：a、strong、b、em、i、del、s、ins、u、span</p>
<p>常用的内联块状元素有：img、input</p>
<hr>
<h1 id="3-常见的浏览器端存储的方式"><a href="#3-常见的浏览器端存储的方式" class="headerlink" title="3.常见的浏览器端存储的方式"></a>3.常见的浏览器端存储的方式</h1><blockquote>
<p>cookie属于文档对象模型DOM树根节点document，而 sessionStorage 和 localStorage 属于浏览器对象模型BOM的对象window</p>
</blockquote>
<h2 id="1-Cookie："><a href="#1-Cookie：" class="headerlink" title="1.Cookie："></a>1.Cookie：</h2><p>操作方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/&quot;</span>    <span class="comment">// 设置cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;</span>    <span class="comment">// 删除cookie</span></span><br></pre></td></tr></table></figure>
<p>cookie会随着每次HTTP请求头信息一起发送，无形中增加了网络流量，另外，cookie能存储的数据容量有限，根据浏览器类型不同而不同，IE6大约只能存储2K。</p>
<p>Cookie可以实现记录访问者的信息、在页面之间传递信息、自动识别用户。</p>
<p>缺点：在请求头上面带着数据，导致流量增加，大小限制<font style="background:#f3f5f9;color:#83bf5b">4k</font></p>
<h2 id="2-localStorage："><a href="#2-localStorage：" class="headerlink" title="2.localStorage："></a>2.localStorage：</h2><p>以键值对(Key-Value)的方式在本地存储，永久存储，永不失效，除非手动删除。IE8+支持，每个域名限制<font style="background:#f3f5f9;color:#83bf5b">5M</font></p>
<p>打开同域的新页面也能访问得到</p>
<p>操作方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="property">username</span> = <span class="string">&#x27;hehe&#x27;</span>                   <span class="comment">// 设置</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;hehe&#x27;</span>)         <span class="comment">// 设置</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>)                 <span class="comment">// 读取</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;username&#x27;</span>)             <span class="comment">// 删除</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">key</span>(<span class="number">1</span>)                             <span class="comment">// 读取索引为1的值</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">clear</span>()                            <span class="comment">// 清除所有</span></span><br></pre></td></tr></table></figure>


<h2 id="3-sessionStorage："><a href="#3-sessionStorage：" class="headerlink" title="3.sessionStorage："></a>3.sessionStorage：</h2><p>操作方式与localStorage一样，sessionStorage意为会话存储，当用户关闭页面窗口时数据就会被清除。</p>
<p>注意：刷新页面sessionStorage不会清除，但是打开同域新页面访问不到。</p>
<h2 id="4-cookie、localStorage、sessionStorage之间的区别"><a href="#4-cookie、localStorage、sessionStorage之间的区别" class="headerlink" title="4. cookie、localStorage、sessionStorage之间的区别"></a>4. cookie、localStorage、sessionStorage之间的区别</h2><p>他们都是保存在浏览器端的存储方式，他们之间的区别：</p>
<ol>
<li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。</li>
<li>存储大小限制不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li>
<li>数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。</li>
<li>作用域不同，sessionStorage不在不同的浏览器页面中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。</li>
<li>Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。</li>
<li>Web Storage 的 api 接口使用更方便，cookie的原生接口不友好，需要自己封装。</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2022/09/24/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>查看git常用命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --help </span><br></pre></td></tr></table></figure>
<p><strong>git查看配置信息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>
<p><strong>配置个人的用户名称和电子邮件地址</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;root&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email test@github.com</span><br></pre></td></tr></table></figure>
<p><strong>第一次初始化：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;first commit&#x27;</span><br><span class="line">git remote add origin git@github.com:帐号名/仓库名.git</span><br><span class="line">git pull origin master</span><br><span class="line">git push origin master # -f 强推</span><br></pre></td></tr></table></figure>
<p><strong>平时工作基本操作：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master # 切到主分支</span><br><span class="line">git fetch origin  # 获取最新变更</span><br><span class="line">git checkout -b dev origin/master # 基于主分支创建dev分支</span><br><span class="line">git add . # 添加到缓存</span><br><span class="line">git commit -m &#x27;xxx&#x27; # 提交到本地仓库</span><br><span class="line">git fetch origin # 获取最新变更</span><br><span class="line">git rebase dev origin/master # 合并到主分支</span><br><span class="line">git push origin dev # 推送到远程分支</span><br><span class="line"></span><br><span class="line">git chekout master # 切到主分支</span><br><span class="line">git merge dev # 合并开发分支</span><br><span class="line"></span><br><span class="line">git clone -b 远程分支 仓库地址 # 本地不存在仓库 拉取远程分支代码</span><br><span class="line">git checkout -b 远程分支 origin/远程分支 # 本地存在仓库，拉取远程分支</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello</title>
    <url>/2022/09/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>


<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo命令</title>
    <url>/2022/09/22/hexo%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h1><h2 id="写作命令"><a href="#写作命令" class="headerlink" title="写作命令"></a>写作命令</h2><ol>
<li>新建分页：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page 名称</span><br></pre></td></tr></table></figure></li>
<li>新建文章：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new 名称或hexo n 名称</span><br></pre></td></tr></table></figure></li>
<li>新建草稿：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new draft 名称或hexo n draft 名称</span><br></pre></td></tr></table></figure></li>
<li>草稿生成文章：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish 名称或hexo p 名称</span><br></pre></td></tr></table></figure></li>
<li>草稿生成分页：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish page 名称或hexo p page 名称</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><ol>
<li>清除已生成文件：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li>
<li>运行本地服务器（预览）：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li>运行本地服务器（预览草稿）：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s --drafts</span><br></pre></td></tr></table></figure></li>
<li>生成静态文件：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li>
<li>部署到服务器：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
<li>生成并部署文件：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g -d或hexo d -g</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>js常见题</title>
    <url>/2022/09/25/js%E5%B8%B8%E8%A7%81%E9%A2%98/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>哄女朋友教学</title>
    <url>/2022/09/23/%E5%93%84%E5%A5%B3%E6%9C%8B%E5%8F%8B%E6%95%99%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="开始教学"><a href="#开始教学" class="headerlink" title="开始教学"></a>开始教学</h1><p>1、带她出门旅游。一个新的环境可以增加你们生活的中的乐趣。</p>
<p>2、关心她。她的无理取闹也是为了博得你的关注，你的暖心回应会让她开心一些。</p>
<p>3、陪伴她。最好的关爱就是陪伴，陪她做她想做的事情。</p>
<p>4、理解她。每个人都有不一样的爱好和习惯。</p>
<p>5、送礼物。女孩子都喜欢惊喜。</p>
<p>6、找原因。找到女朋友不开心的原因，从源头解决问题。</p>
<p>7、坚定立场。坚定的站在女朋友这一边。</p>
<p>8、适度的幽默。幽默的哄女朋友。</p>
<p>9、脸皮厚。哄女朋友的时候一定要脸皮厚。</p>
<p>10、用行动代替言语。不要给女朋友画大饼，要付出行动。</p>
]]></content>
      <categories>
        <category>恋爱</category>
      </categories>
      <tags>
        <tag>恋爱</tag>
      </tags>
  </entry>
  <entry>
    <title>眼中星辰皆是你</title>
    <url>/2022/09/25/%E7%9C%BC%E4%B8%AD%E6%98%9F%E8%BE%B0%E7%9A%86%E6%98%AF%E4%BD%A0/</url>
    <content><![CDATA[<center>满目山河不及你，浩瀚星河皆为尘</center>

<style>
        * {
            padding: 0;
            margin: 0;
        }
        
       .bd {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: linear-gradient(to bottom left, rgb(128, 232, 250), rgb(255, 66, 208), rgb(242, 0, 250));
        }
        
        .zzl {
            position: fixed;
            overflow: hidden;
            top: 7%;
            left: 40%;
            color: rgb(21, 219, 245);
            font-family: Verdana;
            font-size: 30px;
            width: 0;
            height: 40px;
            line-height: 40px;
            white-space: nowrap;
            text-align: center;
            animation: w 4s steps(4) infinite;
        }
        
        @keyframes w {
            0% {
                width: 0;
            }
            100% {
                width: 120px;
            }
        }
        
        .u {
            position: relative;
            display: flex;
            height: 200px;
        }
        
        .u::after {
            content: '';
            position: absolute;
            top: 0;
            left: 50%;
            color: darkturquoise;
            font-size: 30px;
            font-weight: 700;
            transform: translate(-50%, -700%);
        }
        
        .l {
            width: 20px;
            height: 20px;
            border-radius: 10px;
            margin: 0 10px;
        }
        
        .l:nth-child(1) {
            background-color: red;
            animation: love1 5s 0s infinite;
        }
        
        .l:nth-child(2) {
            background-color: darkturquoise;
            animation: love2 5s 0.2s infinite;
        }
        
        .l:nth-child(3) {
            background-color: darksalmon;
            animation: love3 5s 0.4s infinite;
        }
        
        .l:nth-child(4) {
            background-color: deeppink;
            animation: love4 5s 0.6s infinite;
        }
        
        .l:nth-child(5) {
            background-color: rgb(20, 243, 150);
            animation: love5 5s 0.8s infinite;
        }
        
        .l:nth-child(6) {
            background-color: deeppink;
            animation: love4 5s 1s infinite;
        }
        
        .l:nth-child(7) {
            background-color: darksalmon;
            animation: love3 5s 1.2s infinite;
        }
        
        .l:nth-child(8) {
            background-color: darkturquoise;
            animation: love2 5s 1.4s infinite;
        }
        
        .l:nth-child(9) {
            background-color: red;
            animation: love1 5s 1.6s infinite;
        }
        /* 下面定义动画 */
        
        @keyframes love1 {
            30%,
            50% {
                height: 60px;
                transform: translateY(-30px);
            }
            70%,
            100% {
                height: 20px;
                transform: translateY(0);
            }
        }
        
        @keyframes love2 {
            30%,
            50% {
                height: 125px;
                transform: translateY(-60px);
            }
            70%,
            100% {
                height: 20px;
                transform: translateY(0);
            }
        }
        
        @keyframes love3 {
            30%,
            50% {
                height: 160px;
                transform: translateY(-75px);
            }
            70%,
            100% {
                height: 20px;
                transform: translateY(0);
            }
        }
        
        @keyframes love4 {
            30%,
            50% {
                height: 180px;
                transform: translateY(-60px);
            }
            70%,
            100% {
                height: 20px;
                transform: translateY(0);
            }
        }
        
        @keyframes love5 {
            30%,
            50% {
                height: 200px;
                transform: translateY(-45px);
            }
            70%,
            100% {
                height: 20px;
                transform: translateY(0);
            }
        }
        
        .lv .love {
            position: fixed;
            overflow: hidden;
            top: 44%;
            left: 32%;
            color: darkturquoise;
            font-family: Verdana;
            width: 0;
            height: 40px;
            font-size: 40px;
            line-height: 40px;
            animation: 4s lo steps(4) infinite;
        }
        
        @keyframes lo {
            0% {
                width: 0;
            }
            100% {
                width: 200px;
            }
        }
    </style>

<div class="bd">

<div class="zzl">胡科科</div>
    <ul class="u">
        <li class="l"></li>
        <li class="l"></li>
        <li class="l"></li>
        <li class="l"></li>
        <li class="l"></li>
        <li class="l"></li>
        <li class="l"></li>
        <li class="l"></li>
        <li class="l"></li>
    <div class="lv">
        <h3 class="love">我 爱 你</h3>
    </div>
    </ul>
    
</div>
<div style="text-align:center;font-size:20px;height:20px;line-height:20px">我想和你一起生活</div>

<hr>
<p><em>春天在新绿的树下拍照，夏天在晚风中吃甜筒，秋天去看苍黄的山林，冬天一起打盹。</em></p>
<p><img src="/2022/09/25/%E7%9C%BC%E4%B8%AD%E6%98%9F%E8%BE%B0%E7%9A%86%E6%98%AF%E4%BD%A0/girlfriend.jpg"></p>
]]></content>
      <categories>
        <category>恋爱</category>
      </categories>
      <tags>
        <tag>恋爱</tag>
      </tags>
  </entry>
</search>
